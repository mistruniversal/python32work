"""Библиотека Threading позволяет разбросать задачи на потоки процессора
то есть чтобы код не выполнялся друг за другом а распредилялся на несколько путей"""
import threading


"""Первый пример по факту просто привезали один поток к этой функции 
lock=threading.Lock() - это запись это класс который как раз позволяет запускать код в однопоточном режиме"""
lock=threading.Lock()
def score():
    with lock:
        for i in range(100000):
            (i*2)**3
        print("КОНЕЦ1")



"""Сдесь по сути тоже самое только мы при помощи lock.acquire() блокируем один поток от вторжения из вне ну или что бы его никто не занимал а
lock.release() разблокировывает его"""
lock=threading.Lock()
def score():
    lock.acquire()
    for i in range(100000):
        (i*2)**3
    print("КОНЕЦ1")
    lock.release()

"""Есть еще RLock, или "рекурсивная блокировка", — это специальный тип блокировки
 в Python, который позволяет одному и тому же потоку захватывать блокировку
 несколько раз без возникновения взаимной блокировки (deadlock).
 
 По факту пишеться так-lock=threading.RLock()"""
lock=threading.RLock()
def score():
    with lock:
        for i in range(100000):
            (i*2)**3
        print("КОНЕЦ1")



